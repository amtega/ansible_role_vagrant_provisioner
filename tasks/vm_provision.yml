---
# Provisione vagrant vm

- name: "create vagrant directory for vm {{ vm.hostname }}"
  file:
    path: "{{ vm_path }}"
    state: directory
    force: yes
    recurse: yes

- name: "create vagrant file for vm {{ vm.hostname }}"
  template:
    src: Vagrantfile.j2
    dest: "{{ vm_path }}/Vagrantfile"
    force: yes
    backup: yes
  register: vagrant_provisioner_create_vagrantfile_result

- name: "check vagrant status for vm {{ vm.hostname }}"
  shell: "vagrant status --machine-readable"
  args:
    chdir: "{{ vm_path }}"
  register: vagrant_provisioner_check_status_result
  changed_when: false

- name: "destroy previous vm instance of {{ vm.hostname }}"
  shell: "vagrant destroy --machine-readable"
  args:
    chdir: "{{ vm_path }}"
  register: vagrant_provisioner_destroy_result
  when: >-
    vagrant_provisioner_create_vagrantfile_result.changed
    and ',state,not_created'
        not in vagrant_provisioner_check_status_result.stdout
  changed_when: >-
    'Domain is not created. Please run `vagrant up` first.'
    not in vagrant_provisioner_destroy_result.stdout  #
  failed_when: false

- name: "vagrant up {{ vm.hostname }}"
  shell: "vagrant up --machine-readable"
  register: vagrant_provisioner_up_result
  args:
    chdir: "{{ vm_path }}"
  when: >-
    ',state,running'
    not in vagrant_provisioner_check_status_result.stdout
  changed_when: >
    vagrant_provisioner_up_result.rc == 0
    and ',action,up,start' in vagrant_provisioner_up_result.stdout
    and ',action,up,end' in vagrant_provisioner_up_result.stdout
  failed_when: >-
    ',ui,error,' in vagrant_provisioner_up_result.stdout
    or vagrant_provisioner_up_result.rc == 1

- name: "get vagrant ssh config {{ vm.hostname }}"
  shell: "vagrant ssh-config"
  register: vagrant_provisioner_ssh_config_result
  args:
    chdir: "{{ vm_path }}"
  changed_when: false

- block:
    - name: "associate inventory info to vagrant vm {{ vm_name_ip }}"
      add_host:
        name: "{{ vm.hostname }}"
        groups: >-
          {{ vm.groups | default([])
            + vagrant_provisioner_vms_groups }}
        state: started
        ansible_connection: >-
          {{ vm.ansible_connection
             | default(vagrant_provisioner_vm_ansible_connection) }}
        ansible_host: >-
          {{ vagrant_provisioner_ssh_config_result.stdout_lines[1][11:] }}
          {{ vagrant_provisioner_ssh_config_result.stdout
             | regex_replace(
                 '^(?sm).*\n *HostName *(?P<hostname>[^\n]+)\n.*$',
                 '\1') }}
        ansible_port: >-
          {{ vm.ansible_port
             | default(vagrant_provisioner_vm_ansible_port) }}
        ansible_user: >-
          {{ vm.ansible_user
             | default(vagrant_provisioner_vm_ansible_user) }}
        ansible_ssh_pass: >-
          {{ vm.ansible_ssh_pass
             | default(vagrant_provisioner_vm_ansible_ssh_pass) }}
        ansible_ssh_private_key_file: >-
          {{ vm.ansible_ssh_private_key_file
             | default(vagrant_provisioner_ssh_config_result.stdout
                       | regex_replace(
                       '^(?sm).*\n *IdentityFile *'
                       + '(?P<identityfile>[^\n]+)\n.*$',
                       '\1')) }}
        ansible_ssh_common_args: >-
          {{ vm.ansible_ssh_common_args
            | default(vagrant_provisioner_vm_ansible_ssh_common_args) }}
        ansible_scp_extra_args: >-
          {{ vm.ansible_scp_extra_args
             | default(vagrant_provisioner_vm_ansible_scp_extra_args) }}
        ansible_ssh_extra_args: >-
          {{ vm.ansible_ssh_extra_args
             | default(vagrant_provisioner_vm_ansible_scp_extra_args) }}
        ansible_ssh_pipelining: >-
          {{ vm.ansible_ssh_pipelining
             | default(vagrant_provisioner_vm_ansible_ssh_pipelining) }}
        ansible_ssh_executable: >-
          {{ vm.ansible_ssh_executable
             | default(vagrant_provisioner_vm_ansible_ssh_executable) }}
        ansible_become: >-
          {{ vm.ansible_become
             | default(vagrant_provisioner_vm_ansible_become) }}
        ansible_become_method: >-
          {{ vm.ansible_become_method
             | default(vagrant_provisioner_vm_ansible_become_method) }}
        ansible_become_user: >-
          {{ vm.ansible_become_user
             | default(vagrant_provisioner_vm_ansible_become_user) }}
        ansible_become_pass: >-
          {{ vm.ansible_become_pass
             | default(vagrant_provisioner_vm_ansible_become_pass) }}
        ansible_become_exe: >-
          {{ vm.ansible_become_exe
             | default(vagrant_provisioner_vm_ansible_become_exe) }}
        ansible_become_flags: >-
          {{ vm.ansible_become_flags
             | default(vagrant_provisioner_vm_ansible_become_flags) }}
        ansible_python_interpreter: >-
          {{ vm.ansible_python_interpreter
             | default(vagrant_provisioner_vm_ansible_python_interpreter) }}
        ansible_shell_executable: >-
          {{ vm.ansible_shell_executable
             | default(vagrant_provisioner_vm_ansible_shell_executable) }}
        vagrant_provisioner_vm_directory: >-
          {{ vm_path }}
      changed_when: false

    - name: "gather vagrant ssh public key form vm {{ vm_name_ip }}"
      shell: >-
        ssh-keyscan -T 10 {{ hostvars[vm.hostname]['ansible_host'] }}
      changed_when: false
      register: vagrant_provisioner_get_public_key_result
      check_mode: no

    - name: "remove old ssh known_hosts entries for vm {{ vm_name_ip }}"
      known_hosts:
        name: >-
          {{ vagrant_provisioner_get_public_key_result.stdout }}
        state: absent
  vars:
    vm_name_ip: >-
      {{ vm.hostname }}
      ({{ vagrant_provisioner_ssh_config_result.stdout_lines[1][11:] }})
