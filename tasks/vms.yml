---
# Setup vagrant vms

- block:
    - name: get current vms facts
      import_tasks: vms_facts.yml

    - fail:

    - name: refresh vagrant status
      shell: vagrant global-status --prune
      changed_when: false

    - name: read vagrant virtual machines directories
      stat:
        path: "{{ vm_path }}"
      register: vagrant_provisioner_check_path_result
      loop: "{{ vms_state_absent }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - name: create vagrant virtual machines directories
      file:
        path: "{{ vm_path }}"
        state: directory
        force: yes
        mode: 0700
      loop: "{{ vms_state_started }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - name: create vagrant config file for virtual machines
      template:
        src: Vagrantfile.j2
        dest: "{{ vm_path }}/Vagrantfile"
        mode: 0600
      register: vagrant_provisioner_create_vagrantfile_result
      loop: "{{ vms_state_started }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - name: get vagrant virtual machines status
      shell: "vagrant status --machine-readable"
      args:
        chdir: "{{ vm_path }}"
      register: vagrant_provisioner_check_status_result
      changed_when: false
      loop: "{{ vms_state_started }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - import_tasks: "{{ vagrant_provisioner_vms_provisioning_include }}"
      vars:
        method: "{{ vagrant_provisioner_vms_provisioning_method }}"
        vagrant_provisioner_vms_provisioning_include: >-
          {{ (method == "asynchronous")
             | ternary("vms_asynchronous.yml",
                       "vms_sequential.yml") }}

    # - name: get vagrant virtual machines ssh config
    #   shell: "vagrant ssh-config"
    #   register: vagrant_provisioner_ssh_config_result
    #   args:
    #     chdir: "{{ vm_path }}"
    #   changed_when: false
    #   loop: "{{ vms_state_started }}"
    #   loop_control:
    #     label: "{{ vm.hostname }}"
    #     loop_var: vm

    - block:
        - name: associate inventory info to vagrant virtual machines
          add_host:
            name: "{{ vm.1.hostname }}"
            groups: >-
              {{ vm.1.groups | default([]) + vagrant_provisioner_vm_groups }}
            state: started
            ansible_connection: >-
              {{ vm.1.ansible_connection
                 | default(vagrant_provisioner_vm_ansible_connection) }}
            ansible_host: >-
              {{ ssh_configs[vm.0].stdout_lines
                 | select("search", "HostName")
                 | first
                 | regex_replace(".*HostName (.*)", "\1")
                 | trim }}
            ansible_port: >-
              {{ ssh_configs[vm.0].stdout_lines
                 | select("search", "Port")
                 | first
                 | regex_replace(".*Port (.*)", "\1")
                 | trim }}
            ansible_user: >-
              {{ vm.1.ansible_user
                 | default(vagrant_provisioner_vm_ansible_user) }}
            ansible_ssh_pass: >-
              {{ vm.1.ansible_ssh_pass
                 | default(vagrant_provisioner_vm_ansible_ssh_pass) }}
            ansible_ssh_private_key_file: >-
              {{ vm.1.ansible_ssh_private_key_file
                 | default(ssh_configs[vm.0].stdout
                           | regex_replace(
                           '^(?sm).*\n *IdentityFile *'
                           + '(?P<identityfile>[^\n]+)\n.*$',
                           '\1')) }}
            ansible_ssh_common_args: >-
              {{ vm.1.ansible_ssh_common_args
                | default(vagrant_provisioner_vm_ansible_ssh_common_args) }}
            ansible_scp_extra_args: >-
              {{ vm.1.ansible_scp_extra_args
                 | default(vagrant_provisioner_vm_ansible_scp_extra_args) }}
            ansible_ssh_extra_args: >-
              {{ vm.1.ansible_ssh_extra_args
                 | default(vagrant_provisioner_vm_ansible_scp_extra_args) }}
            ansible_ssh_pipelining: >-
              {{ vm.1.ansible_ssh_pipelining
                 | default(vagrant_provisioner_vm_ansible_ssh_pipelining) }}
            ansible_ssh_executable: >-
              {{ vm.1.ansible_ssh_executable
                 | default(vagrant_provisioner_vm_ansible_ssh_executable) }}
            ansible_become: >-
              {{ vm.1.ansible_become
                 | default(vagrant_provisioner_vm_ansible_become) }}
            ansible_become_method: >-
              {{ vm.1.ansible_become_method
                 | default(vagrant_provisioner_vm_ansible_become_method) }}
            ansible_become_user: >-
              {{ vm.1.ansible_become_user
                 | default(vagrant_provisioner_vm_ansible_become_user) }}
            ansible_become_pass: >-
              {{ vm.1.ansible_become_pass
                 | default(vagrant_provisioner_vm_ansible_become_pass) }}
            ansible_become_exe: >-
              {{ vm.1.ansible_become_exe
                 | default(vagrant_provisioner_vm_ansible_become_exe) }}
            ansible_become_flags: >-
              {{ vm.1.ansible_become_flags
                 | default(vagrant_provisioner_vm_ansible_become_flags) }}
            ansible_python_interpreter: >-
              {{ vm.1.ansible_python_interpreter
                 | default(vagrant_provisioner_vm_ansible_python_interpreter) }}
            ansible_shell_executable: >-
              {{ vm.1.ansible_shell_executable
                 | default(vagrant_provisioner_vm_ansible_shell_executable) }}
            vagrant_provisioner_vm_directory: >-
              {{ indexed_vm_path }}
          changed_when: false
          loop: "{{ query('indexed_items', vms_state_started | list) }}"
          loop_control:
            label: >-
              {{ vm.1.hostname
                 + " "
                 + ssh_configs[vm.0].stdout_lines[1][11:] }}
            loop_var: vm

        # - name: gather vagrant virtual machines ssh public keys
        #   shell: >-
        #     ssh-keyscan -T 10
        #     -p {{ ssh_configs[vm.0].stdout_lines
        #           | select("search", "Port")
        #           | first
        #           | regex_replace(".*Port ([0-9]+)", "\1")
        #           | trim }} {{ ssh_configs[vm.0].stdout_lines
        #                        | select("search", "HostName")
        #                        | first
        #                        | regex_replace(".*HostName (.*)", "\1")
        #                        | trim }}
          # changed_when: false
          # register: vagrant_provisioner_get_public_key_result
          # check_mode: no
          # loop: "{{ query('indexed_items', vms_state_started | list) }}"
          # loop_control:
          #   label: "{{ vm.1.hostname }}"
          #   loop_var: vm

        - name: setup ssh known_hosts entries for vms
          known_hosts:
            name: >-
              [{{ ssh_configs[vm.0].stdout_lines
                  | select("search", "HostName")
                  | first
                  | regex_replace(".*HostName (.*)", "\1")
                  | trim }}]:{{ ssh_configs[vm.0].stdout_lines
                                | select("search", "Port")
                                | first
                                | regex_replace(".*Port (.*)", "\1")
                                | trim }}
            key: >-
              {{ vagrant_provisioner_get_public_key_result.results[vm.0].stdout }}
            state: present
          loop: "{{ query('indexed_items', vms_state_started | list) }}"
          vars:
          loop_control:
            label: "{{ vm.1.hostname }}"
            loop_var: vm
      vars:
        ssh_configs: "{{ vagrant_provisioner_ssh_config_result.results }}"

    - name: remove vagrant virtual machines directories
      file:
        path: "{{ indexed_vm_path }}"
        state: absent
        force: yes
      when: not vagrant_provisioner_vms_setup_result.results[vm.0] is failed
      loop: >-
        {{ query('indexed_items', vms_state_absent | list) }}
      loop_control:
        label: "{{ vm.1.hostname }}"
        loop_var: vm
  vars:
    vms_state_undefined: >-
      {{ vagrant_provisioner_vms
         | selectattr("state", "undefined")
         | list }}
    vms_state_started: >-
      {{ vagrant_provisioner_vms
         | difference(vms_state_undefined)
         | selectattr("state", "equalto", "started")
         | list
         + (vagrant_provisioner_vm_state == "started")
           | ternary(vms_state_undefined, []) }}
    vms_state_absent: >-
      {{ vagrant_provisioner_vms
         | difference(vms_state_undefined)
         | selectattr("state", "equalto", "absent")
         | list
         + (vagrant_provisioner_vm_state == "absent")
           | ternary(vms_state_undefined, []) }}
    vm_path: >-
      {{ vm.directory
         | default(vagrant_provisioner_vms_directory | expanduser
                   + "/"
                   + vm.name) }}
    indexed_vm_path: >-
      {{ vm.1.directory
         | default(vagrant_provisioner_vms_directory | expanduser
                   + "/"
                   + vm.1.name) }}
    mapped_ports: >-
      {{ vagrant_provisioner_ssh_config_result.results
         | map(attribute="stdout_lines")
         | map("search", "Port ")
         | list }}
  tags:
    - role::vagrant_provisioner
    - role::vagrant_provisioner::vms
