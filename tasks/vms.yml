---
# Setup vagrant vms

- block:
    - name: get current vms facts
      import_tasks: vms_facts.yml

    - name: create vagrant virtual machines directories
      file:
        path: "{{ vm_path }}"
        state: directory
        force: yes
        mode: 0700
      loop: "{{ vms_state_started }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - name: create vagrant config file for virtual machines
      template:
        src: Vagrantfile.j2
        dest: "{{ vm_path }}/Vagrantfile"
        mode: 0600
      register: vagrant_provisioner_create_vagrantfile_result
      loop: "{{ vms_state_started }}"
      loop_control:
        label: "{{ vm.hostname }}"
        loop_var: vm

    - import_tasks: "{{ vagrant_provisioner_vms_provisioning_include }}"
      vars:
        method: "{{ vagrant_provisioner_vms_provisioning_method }}"
        vagrant_provisioner_vms_provisioning_include: >-
          {{ (method == "asynchronous")
             | ternary("vms_asynchronous.yml",
                       "vms_sequential.yml") }}

    - name: refresh provisioned virtual machine facts
      import_tasks: vms_facts.yml

    - name: create .ssh directory
      file:
        path: "~/.ssh"
        state: directory
        mode: 0700
      loop: "{{ vagrant_provisioner_known_hosts_dest }}"
      delegate_to: "{{ item }}"

    - name: setup ssh known_hosts entries
      known_hosts:
        name: "[{{ item.1.ansible_host }}]:{{ item.1.ansible_port }}"
        key: "{{ item.1.ssh_public_keys | default('') }}"
        state: >-
          {{ (vm_state== "started")
             | ternary("present",
                       (vm_state == "stopped")
                       | ternary("absent", item.1.state)) }}
      loop: >-
        {{ query(
             'nested',
              vagrant_provisioner_known_hosts_dest,
              vagrant_provisioner_vms_facts
              | list) }}
      loop_control:
        label: >-
          {{ item.1.name }}
          {{ item.1.ansible_host }}:{{ item.1.ansible_port }}
      vars:
        vm_state: "{{ item.1.state | default(vagrant_provisioner_vm_state) }}"
      delegate_to: "{{ item.0 }}"

    - name: associate inventory info to managed vagrant virtual machines
      local_action: add_host
      args:
        name: "{{ vm.name }}"
        groups: "{{ vm.groups }}"
        ansible_connection: "{{ vm.ansible_connection }}"
        ansible_host: "{{ vm.ansible_host }}"
        ansible_port: "{{ vm.ansible_port }}"
        ansible_user: "{{ vm.ansible_user }}"
        ansible_ssh_pass: "{{ vm.ansible_ssh_pass }}"
        ansible_ssh_private_key_file: "{{ vm.ansible_ssh_private_key_file }}"
        ansible_ssh_common_args: "{{ vm.ansible_ssh_common_args }}"
        ansible_scp_extra_args: "{{ vm.ansible_scp_extra_args }}"
        ansible_ssh_extra_args: "{{ vm.ansible_ssh_extra_args }}"
        ansible_ssh_pipelining: "{{ vm.ansible_ssh_pipelining }}"
        ansible_ssh_executable: "{{ vm.ansible_ssh_executable }}"
        ansible_become: "{{ vm.ansible_become }}"
        ansible_become_method: "{{ vm.ansible_become_method }}"
        ansible_become_user: "{{ vm.ansible_become_user }}"
        ansible_become_pass: "{{ vm.ansible_become_pass }}"
        ansible_become_exe: "{{ vm.ansible_become_exe }}"
        ansible_become_flags: "{{ vm.ansible_become_flags }}"
        ansible_python_interpreter: "{{ vm.ansible_python_interpreter }}"
        ansible_shell_executable: "{{ vm.ansible_shell_executable }}"
        ssh_public_keys: "{{ vm.ssh_public_keys | default('') }}"
      changed_when: false
      when: vagrant_provisioner_in_memory_inventory
      loop: >-
        {{ vagrant_provisioner_vms_facts
           | selectattr("ansible_user", "defined")
           | list }}
      loop_control:
        label: "{{ vm.name }} {{ vm.ansible_host }}:{{ vm.ansible_port }}"
        loop_var: vm

    - name: associate inventory info to unmanaged vagrant virtual machines
      local_action: add_host
      args:
        name: "{{ vm.name }}"
        groups: "{{ vm.groups }}"
        ansible_connection: "{{ vm.ansible_connection }}"
        ansible_host: "{{ vm.ansible_host }}"
        ansible_port: "{{ vm.ansible_port }}"
        ansible_ssh_private_key_file: "{{ vm.ansible_ssh_private_key_file }}"
        ssh_public_keys: "{{ vm.ssh_public_keys | default('') }}"
      changed_when: false
      when: vagrant_provisioner_in_memory_inventory
      loop: >-
        {{ vagrant_provisioner_vms_facts
           | selectattr("ansible_user", "undefined")
           | list }}
      loop_control:
        label: "{{ vm.name }} {{ vm.ansible_host }}:{{ vm.ansible_port }}"
        loop_var: vm

    - name: remove vagrant absent virtual machines directories
      file:
        path: "{{ vm_path }}"
        state: absent
        force: yes
      when: >-
        not vm.name in
            vagrant_provisioner_vms_setup_result.results
            | select("failed")
            | selectattr("vm.name")
            | list
      loop: "{{ vms_state_absent }}"
      loop_control:
        label: "{{ vm.name }}"
        loop_var: vm
  vars:
    vms_state_undefined: >-
      {{ vagrant_provisioner_vms
         | selectattr("state", "undefined")
         | list }}
    vms_state_started: >-
      {{ vagrant_provisioner_vms
         | difference(vms_state_undefined)
         | selectattr("state", "equalto", "started")
         | list
         + (vagrant_provisioner_vm_state == "started")
           | ternary(vms_state_undefined, []) }}
    vms_state_absent: >-
      {{ vagrant_provisioner_vms
         | difference(vms_state_undefined)
         | selectattr("state", "equalto", "absent")
         | list
         + (vagrant_provisioner_vm_state == "absent")
           | ternary(vms_state_undefined, []) }}
    vm_path: >-
      {{ vm.directory
         | default(vagrant_provisioner_vms_path | expanduser
                   + "/"
                   + vm.name) }}
  tags:
    - role::vagrant_provisioner
    - role::vagrant_provisioner::vms
