---
# Setup vagrant vms



- block:
    - block:
        - name: "({{ vm.hostname }}) create vagrant vm directories"
          file:
            path: >-
              {{ vm_path }}
            state: directory
            force: yes
            recurse: yes

        - name: "({{ vm.hostname }}) create vagrant file"
          template:
            src: Vagrantfile.j2
            dest: >-
              {{ vm_path }}/Vagrantfile
            force: yes
            backup: yes
          register: result_vagrantfile

        - name: "({{ vm.hostname }}) vagrant status"
          shell: "vagrant status --machine-readable"
          args:
            chdir: >-
              {{ vm_path }}
          register: result_vagrant_status
          changed_when: false

        - name: "({{ vm.hostname }}) vagrant destroy previous vm instance"
          shell: "vagrant destroy --machine-readable"
          args:
            chdir: >-
              {{ vm_path }}
          register: result_vagrant_destroy
          when: >-
            result_vagrantfile.changed
            and ',state,not_created' not in result_vagrant_status.stdout
          changed_when: >-
            'Domain is not created. Please run `vagrant up` first.' not in result_vagrant_destroy.stdout
          failed_when: false

        - name: "({{ vm.hostname }}) vagrant up"
          shell: "vagrant up --machine-readable"
          register: result_vagrant_up
          args:
            chdir: >-
              {{ vm_path }}
          when: >-
            ',state,running' not in result_vagrant_status.stdout
          changed_when: >
            result_vagrant_up.rc == 0
            and ',action,up,start' in result_vagrant_up.stdout
            and ',action,up,end' in result_vagrant_up.stdout
          failed_when: >-
            ',ui,error,' in result_vagrant_up.stdout
            or result_vagrant_up.rc == 1

        - name: "({{ vm.hostname }}) get vm ip address"
          shell: "vagrant ssh-config"
          register: result_vagrant_ssh_config
          args:
            chdir: >-
              {{ vm_path }}
          changed_when: false

        - name: "({{ vm.hostname }}) associate auth info / group info to vms"
          add_host:
            name: >-
              {{ vm.hostname }}
            groups: >-
              {{ vagrant_provisioner_vms_group }}
            state: present
            ansible_user: vagrant
            ansible_host: >-
              {{ result_vagrant_ssh_config.stdout_lines[1][11:] }}
              {{ result_vagrant_ssh_config.stdout |
                regex_replace('^(?sm).*\n *HostName *(?P<hostname>[^\n]+)\n.*$',
                                                          '\1') }}
            ansible_ssh_private_key_file: >-
              {{ result_vagrant_ssh_config.stdout |
                regex_replace('^(?sm).*\n *IdentityFile *(?P<identityfile>[^\n]+)\n.*$',
                                                          '\1') }}
            # HACK: Without this it ignores ansible.cfg host_key_checking var
            ansible_ssh_extra_args: >-
              -o StrictHostKeyChecking=no
            ansible_python_interpreter: >-
              {{ vm.ansible_python_interpreter | default(vagrant_provisioner_default_ansible_python_interpreter) }}
          changed_when: false
      when: vm.state == 'present'

    - block:
        - name: "({{ vm.hostname }}) vagrant vm directory status"
          stat:
            path: "{{ vm_path }}"
          register: vm_path_stat

        - name: "({{ vm.hostname }}) vagrant destroy"
          shell: "vagrant destroy --machine-readable"
          args:
            removes: "Vagrantfile"
            chdir:   "{{ vm_path }}"
          register: result_vagrant_destroy
          when: vm_path_stat.stat.isdir is defined and vm_path_stat.stat.isdir
          changed_when: >-
            'Domain is not created. Please run `vagrant up` first.'
              not in result_vagrant_destroy.stdout
          failed_when: false

        - name: "({{ vm.hostname }}) remove vagrant vm directory"
          file:
            path: "{{ vm_path }}"
            state: absent
            force: yes
      when: vm.state == 'absent'
  vars:
    vm_path: >-
      {{ vagrant_provisioner_vms_directory | expanduser
         + "/virtual_machines/"
         + vm.subdirectory }}
